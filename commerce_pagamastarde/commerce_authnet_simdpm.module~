<?php

/**
 * @file
 * Implements Paga+Tarde payment services for use with Drupal Commerce.
 */

/**
 * Paga+Tarde server addresses.
 */
define('PAGAMASTARDE_URL', 'https://pmt.pagantis.com/v1/installments');


/**
 * Implements hook_menu().
 */
function commerce_pagamastarde_menu() {
  $items = array();

  $items['cart/pagamastarde/complete'] = array(
    'title' => 'Order complete using Paga+Tarde',
    'page callback' => 'commerce_pagamastarde_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/pagamastarde/order_complete'] = array(
    'title' => 'User Redirect after order complete using Paga+Tarde',
    'page callback' => 'commerce_pagamastarde_order_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_pagamastarde_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['pagamastarde'] = array(
    'base' => 'commerce_pagamastarde',
    'title' => t('Credit Card via Paga+Tarde'),
    'short_title' => t('Paga+Tarde'),
    'description' => t('Paga+Tarde SIM/DPM'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_pagamastarde_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'entorno' => 'test',
    'test_account' => '',
    'test_key' => '',
    'real_account' => '',
    'real_key' => '',
    'discount' => 'false',
    );
  $form['entorno'] = array(
      '#type' => 'select',
      '#title' => t('Entorno'),
      '#options' => array(
        'test' => 'test',
        'real' => 'real',
      ),
      '#multiple' => FALSE,
      '#description' => t('Procesar transaciones en modo test o real.'),
      '#default_value' => $settings['entorno'],
    );
  $form['test_account'] = array(
    '#type' => 'textfield',
    '#title' => t('TEST - Código de cuenta'),
    '#description' => t('Código de cuenta de test'),
    '#default_value' => $settings['test_account'],
  );
  $form['test_key'] = array(
    '#type' => 'textfield',
    '#title' => t('TEST - Clave de firma'),
    '#description' => t('Clave de cunenta de test'),
    '#default_value' => $settings['test_key'],
  );
  $form['real_account'] = array(
    '#type' => 'textfield',
    '#title' => t('REAL - Código de cuenta'),
    '#description' => t('Código de cuenta real'),
    '#default_value' => $settings['real_account'],
  );
  $form['real_key'] = array(
    '#type' => 'textfield',
    '#title' => t('REAL - Clave de firma'),
    '#description' => t('Clave de cunenta real'),
    '#default_value' => $settings['real_key'],
  );
  $form['discount'] = array(
    '#type' => 'select',
    '#title' => t('Descuento - asumir comisiones'),
    '#options' => array(
      'false' => 'false',
      'true' => 'true',
    ),
    '#multiple' => FALSE,
    '#description' => t('True si quieres asumir las comisiones de Paga+Tarde, false si quieres que el cliente asuma las comisiones.'),
    '#default_value' => $settings['method'],
  );
  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a form.
 */
function commerce_pagamastarde_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['test_account']) || empty($payment_method['settings']['test_key'])) {
    drupal_set_message(t('Paga+Tarde is not configured for use. No account credentials have been specified.'), 'error');
    return array();
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  $amount = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  //PMT only SIM
  //$authnet_method = empty($payment_method['settings']['method']) ? 'DPM' :
  //  $payment_method['settings']['method'];
  $authnet_method='SIM';

  if ($payment_method['settings']['entorno'] == 'test'){
    $the_account = $payment_method['settings']['test_account'];
    $the_key = $payment_method['settings']['test_key'];
  }else{
    $the_account = $payment_method['settings']['real_account'];
    $the_key = $payment_method['settings']['real_key'];
  }
  $amount = number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 2, '.', '');
  $ok_url=check_url(url('cart/pagamastarde/complete', array('absolute' => TRUE)));
  $nok_url=check_url(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));

  // Create the MD5 hash fingerprint
  $message = $the_key.$the_account.$order->order_id.$amount.$currency_code.$ok_url.$nok_url.$dicount;
  $signature = sha1($message);

  $submit_data = array(
    // essentials & good practice params
    'order_id' => $order->order_id,
    'email' => drupal_substr($order->mail, 0, 255),
    'full_name' => drupal_substr($billing_address['first_name'], 0, 50). " ". drupal_substr($billing_address['last_name'], 0, 50),
    'amount' => $amount,
    'currency' => $currency_code,
    'account_id' => $the_account,
    'discount[full]' => $payment_method['settings']['discount'],
    'ok_url' => $ok_url,
    'nok_url' => $nok_url,
    'address[street]' => drupal_substr($billing_address['thoroughfare'], 0, 60),
    'address[city]' => drupal_substr($billing_address['locality'], 0, 40),
    'address[province]' => drupal_substr($billing_address['administrative_area'], 0, 40),
    'address[zipcode]' => drupal_substr($billing_address['postal_code'], 0, 20),
    'description' => drupal_substr(implode(', ', $description), 0, 255),
    'signature' => $signature,
  );

  $form['#action'] = PAGAMASTARDE_URL;

  foreach ($submit_data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Financiación con Paga+Tarde',
  );

  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'],
    '#options' => array(
      'absolute' => TRUE,
      'html' => FALSE,
    ),
  );

  return $form;
}

/**
 * Callback function for posted Paga+Tarde payment response.
 */
function commerce_pagamastarde_complete() {
  $json = file_get_contents('php://input');

  $notification = json_decode($json, true);
  if(isset($notification['event']) && $notification['event'] == 'charge.created')  {

    $order_id = $notification['data']['order_id'];

    $transaction = commerce_payment_transaction_new('pagamastarde', $order->order_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($transaction);
    commerce_payment_redirect_pane_next_page($order);

  // Build an HTML snippet that will be returned to Paga+Tarde and requested
  // back.

  $pagamastarde_redirect_validation_hash = $payment_method['settings']['redirect_validation_hash'];
  $redirect_fingerprint = md5($pagamastarde_redirect_validation_hash . $order_id . $payment_id . $auth_type . $message );

  $args = array(
    REDIRECT_ARG_HASH => $redirect_fingerprint,
    REDIRECT_ARG_ORDER_ID => $order_id,
    REDIRECT_ARG_PAY_ID => $payment_id,
    REDIRECT_ARG_PAY_TYPE => $auth_type,
    REDIRECT_ARG_MESSAGE => $message,
  );
  $redirect_url = url('cart/pagamastarde/order_complete', array('absolute' => TRUE, 'query' => $args));

  $output  = "<html><head><title>Processing Payment</title><script language=\"javascript\">\n";
  $output .= "<!--\n";
  $output .= "window.location.href=\"{$redirect_url}\"\n";
  $output .= "//-->\n";
  $output .= "</script></head><body>\n";
  $output .= "<noscript><meta http-equiv=\"refresh\" content=\"1;url={$redirect_url}\"></noscript>\n";
  $output .= '<p style="text-align: center">Processing your payment; please wait...</p>';
  $output .= "<p style=\"text-align: center\"><a href=\"{$redirect_url}\">Please click here if you are not automatically redirected to the next step.</a></p></body></html>";

  // Return it as a post response and exit.

  print $output;
  exit();
}
}

/**
 * Callback function triggered by Paga+Tarde fetching the HTML snippet returned
 * for the payment response post.
 */
function commerce_pagamastarde_order_complete() {
  $order_id = $_GET[REDIRECT_ARG_ORDER_ID];
  $payment_id = $_GET[REDIRECT_ARG_PAY_ID];
  $message = check_plain($_GET[REDIRECT_ARG_MESSAGE]);
  $auth_type = $_GET[REDIRECT_ARG_PAY_TYPE];
  watchdog('commerce_pagamastarde', 'Receiving redirect response for order !order_id from Paga+Tarde', array('!order_id' => $order_id));

  // Validate posted data.

  $payment_method = commerce_payment_method_instance_load($payment_id);
  $auth_successful = FALSE;
  if ($payment_method) {
    $pagamastarde_redirect_validation_hash = $payment_method['settings']['redirect_validation_hash'];
    $auth_redirect_hash = $_GET[REDIRECT_ARG_HASH];
    $fpredirect = md5($pagamastarde_redirect_validation_hash . $order_id . $payment_id . $auth_type . $message);
    $auth_successful = (drupal_strtolower($fpredirect) == drupal_strtolower($auth_redirect_hash));
  }

  if ($auth_successful) { // validated
    if ($order = commerce_order_load($order_id)) { // order appears valid
      if (!empty($message)) {
        drupal_set_message($message, 'error');
      }
      drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);
    }
    else { // order appears invalid
      watchdog('commerce_pagamastarde', 'An invalid order made it to checkout! Order ID: @cart_order', array('@cart_order' => $order_id), WATCHDOG_ERROR);
      $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
    }
  }
  else { // invalid data
    watchdog('commerce_pagamastarde', 'An unauthenticated response from user after redirection from Paga+Tarde made it to checkout! Calculated redirect hash: !RCMD5  Received redirect hash: !RRMD5  Order ID: @cart_order', array('!RCMD5' => $fpredirect, '!RRMD5' => $auth_redirect_hash, '@cart_order' => $order_id), WATCHDOG_ERROR);
    $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
  }

  // Payment failed; return to checkout.

  drupal_set_message($message, 'error');
  drupal_goto('cart');
}
