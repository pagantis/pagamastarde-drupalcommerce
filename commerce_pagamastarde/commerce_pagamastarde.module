<?php

/**
 * @file
 * Implements Paga+Tarde payment services for use with Drupal Commerce.
 */

/**
 * Paga+Tarde server addresses.
 */
define('COMMERCE_PAGAMASTARDE_PAGAMASTARDE_URL', 'https://pmt.pagantis.com/v1/installments');

/**
 * Implements hook_menu().
 */
function commerce_pagamastarde_menu() {
  $items = array();

  $items['cart/pagamastarde/complete'] = array(
    'title' => 'Order complete using Paga+Tarde',
    'page callback' => 'commerce_pagamastarde_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/pagamastarde/order_complete'] = array(
    'title' => 'User Redirect after order complete using Paga+Tarde',
    'page callback' => 'commerce_pagamastarde_order_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_pagamastarde_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['pagamastarde'] = array(
    'base' => 'commerce_pagamastarde',
    'title' => t('Financiación con Paga+Tarde'),
    'short_title' => t('Paga+Tarde'),
    'description' => t('Paga+Tarde'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_pagamastarde_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'entorno' => 'test',
    'test_account' => '',
    'test_key' => '',
    'real_account' => '',
    'real_key' => '',
    'discount' => 'false',
  );
  $form['entorno'] = array(
    '#type' => 'select',
    '#title' => t('Entorno'),
    '#options' => array(
      'test' => t('test'),
      'real' => t('real'),
    ),
    '#multiple' => FALSE,
    '#description' => t('Procesar transaciones en modo test o real.'),
    '#default_value' => $settings['entorno'],
  );
  $form['test_account'] = array(
    '#type' => 'textfield',
    '#title' => t('TEST - Public Key'),
    '#description' => t('Clave publica de test'),
    '#default_value' => $settings['test_account'],
  );
  $form['test_key'] = array(
    '#type' => 'textfield',
    '#title' => t('TEST - Secret Key'),
    '#description' => t('Clave secreta de test'),
    '#default_value' => $settings['test_key'],
  );
  $form['real_account'] = array(
    '#type' => 'textfield',
    '#title' => t('REAL - Public Key'),
    '#description' => t('Clave publica real'),
    '#default_value' => $settings['real_account'],
  );
  $form['real_key'] = array(
    '#type' => 'textfield',
    '#title' => t('REAL - Secret Key'),
    '#description' => t('Clave secreta real'),
    '#default_value' => $settings['real_key'],
  );
  $form['discount'] = array(
    '#type' => 'select',
    '#title' => t('Descuento - asumir comisiones'),
    '#options' => array(
      'false' => t('false'),
      'true' => t('true'),
    ),
    '#multiple' => FALSE,
    '#description' => t('True si quieres asumir las comisiones de Paga+Tarde, false si quieres que el cliente asuma las comisiones.'),
    '#default_value' => $settings['discount'],
  );
  return $form;
}

/**
 * Redirect form, a wrapper function for building a form.
 */
function commerce_pagamastarde_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['test_account']) || empty($payment_method['settings']['test_key'])) {
    drupal_set_message(t('Paga+Tarde is not configured for use. No account credentials have been specified.'), 'error');
    return array();
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build a description for the order.
  $description = array();
  $i = 1;
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product_id = $line_item_wrapper->commerce_product->product_id->value();
      $product = commerce_product_load($product_id);
      $price = commerce_product_calculate_sell_price($product);
      $description[] = $product->title . " (" . $line_item_wrapper->quantity->value() . ")";
      // Item descriptions.
      $items["items[$i][description]"] = $product->title . " (" . $line_item_wrapper->quantity->value() . ")";
      $items["items[$i][quantity]"] = $line_item_wrapper->quantity->value();
      $items["items[$i][amount]"] = number_format($price['amount'] / 100 * $line_item_wrapper->quantity->value(), 2, ',', '');
      $i++;
    }

    // Shipping.
    $items["items[0][amount]"] = 0;
    if ($line_item_wrapper->type->value() == "shipping") {
      // Shipping data.
      $items["items[0][description]"] = $line_item_wrapper->value()->data['shipping_service']['name'];
      $items["items[0][quantity]"] = 1;
      $items["items[0][amount]"] += $line_item_wrapper->value()->data['shipping_service']['base_rate']['amount'] / 100;
    }
  }

  $items["items[0][amount]"] = number_format($items["items[0][amount]"], 2, ',', '');

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }
  if (empty($shipping_address['first_name'])) {
    $name_parts = explode(' ', $shipping_address['name_line']);
    $shipping_address['first_name'] = array_shift($name_parts);
    $shipping_address['last_name'] = implode(' ', $name_parts);
  }

  $amount = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  if ($payment_method['settings']['entorno'] == 'test') {
    $the_account = $payment_method['settings']['test_account'];
    $the_key = $payment_method['settings']['test_key'];
  }
  else {
    $the_account = $payment_method['settings']['real_account'];
    $the_key = $payment_method['settings']['real_key'];
  }
  $amount = $amount;

  $args = array(
    'oid' => $order->order_id ,
  );

  $ok_url = url('cart/pagamastarde/order_complete', array('absolute' => TRUE, 'query' => $args));

  $args = array(
    'pid' => $payment_method['instance_id']
  );

  $callback_url = check_url(url('cart/pagamastarde/complete', array('absolute' => TRUE, 'query' => $args)));
  $cancelled_url = check_url(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  $nok_url = check_url(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));

  // Create the MD5 hash fingerprint.
  $message = $the_key . $the_account . $order->order_id . $amount . $currency_code .
    $ok_url . $nok_url . $callback_url . $payment_method['settings']['discount'] . $cancelled_url;
  $signature = sha1($message);
  $signature = hash('sha512',$message);

  $state_code = commerce_pagamastarde_get_state_name($billing_address['administrative_area'], $billing_address['country']);
  $sstate_code = commerce_pagamastarde_get_state_name($shipping_address['administrative_area'], $shipping_address['country']);

  $submit_data = array(
    'order_id' => $order->order_id,
    'email' => drupal_substr($order->mail, 0, 255),
    'full_name' => drupal_substr($billing_address['first_name'], 0, 50) . " " . drupal_substr($billing_address['last_name'], 0, 50),
    'amount' => $amount,
    'currency' => $currency_code,
    'account_id' => $the_account,
    'discount[full]' => $payment_method['settings']['discount'],
    'ok_url' => $ok_url,
    'nok_url' => $nok_url,
    'callback_url' => $callback_url,
    'cancelled_url' => $cancelled_url,
    'address[street]' => drupal_substr($billing_address['thoroughfare'], 0, 60),
    'address[city]' => drupal_substr($billing_address['locality'], 0, 40),
    'address[province]' => drupal_substr($state_code, 0, 40),
    'address[zipcode]' => drupal_substr($billing_address['postal_code'], 0, 20),
    'shipping[street]' => drupal_substr($shipping_address['thoroughfare'], 0, 60),
    'shipping[city]' => drupal_substr($shipping_address['locality'], 0, 40),
    'shipping[province]' => drupal_substr($sstate_code, 0, 40),
    'shipping[zipcode]' => drupal_substr($shipping_address['postal_code'], 0, 20),
    'description' => drupal_substr(implode(', ', $description), 0, 255),
    'signature' => $signature,
  );
  foreach ($items as $key => $value) {
    $submit_data[$key] = $value;
  }

  $form['#action'] = COMMERCE_PAGAMASTARDE_PAGAMASTARDE_URL;

  foreach ($submit_data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Financiación con Paga+Tarde',
  );

  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'],
    '#options' => array(
      'absolute' => TRUE,
      'html' => FALSE,
    ),
    '#attached' => array(
      'js' => array(
        'https://cdn.pagamastarde.com/pmt-simulator/3/js/pmt-simulator.min.js',
        array
        (
          'type' => 'inline',
          'data' => 'jQuery(document).ready(function(){jQuery("#commerce-pagamastarde-redirect-form").submit();});',
        )
      ),
    ),
  );

  $form['some_text'] = array(
  '#markup' => "<p>Please click the button if you are not automatically redirected to the next step.</p>",
  );
  return $form;
}

/**
 * Callback function for posted Paga+Tarde payment response.
 */
function commerce_pagamastarde_complete() {
  $json = file_get_contents('php://input');

  $notification = json_decode($json, TRUE);
  if (isset($notification['event']) && $notification['event'] == 'charge.created') {

    $order_id = $notification['data']['order_id'];
    $order = commerce_order_load($order_id);
    $payment_id = $_GET['pid'];
    $payment_method = commerce_payment_method_instance_load($payment_id);
    if ($payment_method) {
      if ($payment_method['settings'][  'entorno'] == 'test') {
        $the_key = $payment_method['settings']['test_key'];
      }
      else {
        $the_key = $payment_method['settings']['real_key'];
      }
    }
    $signature_check = sha1($the_key.$notification['account_id'].$notification['api_version'].$notification['event'].$notification['data']['id']);
    $signature_check_sha512 = hash('sha512',$the_key.$notification['account_id'].$notification['api_version'].$notification['event'].$notification['data']['id']);
    if ( ($signature_check != $notification['signature']) && ($signature_check_sha512 != $notification['signature']) ){
      die( 'Hack detected.' );
    }

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

    $transaction = commerce_payment_transaction_new('pagamastarde', $order->order_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = "Paga+Tarde payment received for order: " . $order->order_id;
    $transaction->remote_id = $notification['data']['id'];
    $transaction->amount = commerce_currency_decimal_to_amount($notification['data']['amount'] / 100, $notification['data']['currency']);
    $transaction->currency_code = $currency_code;
    commerce_order_status_update($order, 'processing', FALSE, TRUE, 'Your payment has been successfully completed');
    commerce_payment_transaction_save($transaction);
    commerce_payment_redirect_pane_next_page($order);

    $args = array(
      'oid' => $order_id,
    );
    $redirect_url = url('cart/pagamastarde/order_complete', array('absolute' => TRUE, 'query' => $args));

    $output  = "<html><head><title>Processing Payment</title><script language=\"javascript\">\n";
    $output .= "<!--\n";
    $output .= "window.location.href=\"{$redirect_url}\"\n";
    $output .= "//-->\n";
    $output .= "</script></head><body>\n";
    $output .= "<noscript><meta http-equiv=\"refresh\" content=\"1;url={$redirect_url}\"></noscript>\n";
    $output .= '<p style="text-align: center">Processing your payment; please wait...</p>';
    $output .= "<p style=\"text-align: center\"><a href=\"{$redirect_url}\">Please click here if you are not automatically redirected to the next step.</a></p></body></html>";

    // Return it as a post response and exit.

    print $output;
    exit();
  }
}

/**
 * Callback function triggered by Paga+Tarde.
 * Implements hook_order_complete
 */
function commerce_pagamastarde_order_complete() {
  $order_id = $_GET['oid'];
  watchdog('commerce_pagamastarde', 'Receiving redirect response for order !order_id from Paga+Tarde', array('!order_id' => $order_id));

  // Validate posted data.
  if ($order = commerce_order_load($order_id)) {
    drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);
  }
  $message='Payment failed. Please retry it later.';
  // Payment failed; return to checkout.
  drupal_set_message($message, 'error');
  drupal_goto('cart');
}

/**
 * Returns a state name given a state code.
 */
function commerce_pagamastarde_get_state_name($state_code, $country_code = NULL) {
  if ($state_code) {
    $state_code = drupal_strtoupper($state_code);
    $country_code = $country_code ? drupal_strtoupper($country_code) : 'US';

    $address['country'] = $country_code;
    $format_handlers = array('address');
    $context = array('mode' => 'form');
    $address_element = addressfield_generate($address, $format_handlers, $context);
    if (!empty($address_element['locality_block']['administrative_area']['#options'])) {
      $state_options = $address_element['locality_block']['administrative_area']['#options'];
      $state_options = array_change_key_case($state_options, CASE_UPPER);
      return isset($state_options[$state_code]) ? $state_options[$state_code] : '';
    }
  }
}
